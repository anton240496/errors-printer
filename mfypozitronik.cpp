#include "mfypozitronik.h"
#include "ui_mfypozitronik.h"
#include<QtSql/QSqlRecord>
#include<QtSql/QSqlQuery>
#include<QPixmap>
#include<QDebug>
#include<QSqlError>
#include"mainwindow.h"
#include"mainmenu.h"
#include"tormozpol.h"
#include"rolikpodachi.h"
#include"tefval.h"
#include<QStandardItem>
#include<QStandardItemModel>
#include<QVariant>
#include<QFile>
#include<QString>
#include<QLineEdit>


void  mfypozitronik :: create(){
      QSqlQuery query1 = QSqlQuery ();
        if (!query1.exec("SELECT проблема, ответ, пример_изображения_или_замены FROM public.mfypozitronik order by id asc;") )
        {
            QSqlQuery query = QSqlQuery ();
             query.exec( "CREATE TABLE IF NOT EXISTS mfypozitronik ( id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, проблема varchar , ответ varchar, пример_изображения_или_замены bytea)" );
             query.prepare("insert into mfypozitronik ( проблема, ответ, пример_изображения_или_замены) values "
                           "('Износ площадки или износ резины','Замените тормозную площадку', 'Нажмите на кнопку замена тормозной площадки'),"
        "('Износ роликов','Сначала прочистиете все специальной жидкостью, сжатым воздухом, если проблема осталась - замените резину а лучше весь ролик', 'Нажмите на кнопку  очистка, снятие ролика '),"
        "('Износ термопленки','Термопленку (справа смотри ее вид), прочистите сухой тряпкой печатающее устройство и термопленку от постороних материалов',  'pic/termoplenk.jpg'),"
        "('Поломка тефлонового вала ','Замените тефлоновый вал', 'Нажмите на кнопку Замена тефлонового вала'),"
        "('Сканирующая оптика загрязнена ','Чистка сканера, стекла экспонирования', 'Прочистиете стекло специальной жидкостью, сжатым воздухом'),"
        "('Нет нужной проблемы','Более сложный случай обратитесь в ремонт', 'К сожалению, нет решения')");
             if( !query.exec() )
                 qDebug() << "Error inserting image into table:\n" << query.lastError();

        }


         mfymodel = new QSqlQueryModel();
    //SELECT pg_catalog.setval('public.mfypozitronik_id_seq', 6, true);
         mfymodel ->setQuery("SELECT проблема, ответ, пример_изображения_или_замены FROM public.mfypozitronik order by id asc;");
                          //   "SELECT pg_catalog.setval('public.mfypozitronik_id_seq', 6, true);");
         mfymodel->setHeaderData(0,Qt::Horizontal,"Описание Проблемы");
            mfymodel->setHeaderData(1,Qt::Horizontal,"решения");

         mfymodel->setHeaderData(2,Qt::Horizontal,"изображение\n или замена\n детали");


         ui->mfypoz->setModel(mfymodel);
            ui->mfypoz->resizeRowsToContents();
        ui->mfypoz->horizontalHeader()->setDefaultSectionSize(300);
          ui->mfypoz->verticalHeader()->setDefaultSectionSize(100);
    //      ui->mfypoz->resizeColumnToContents(1);3
    //    // ui->mfypoz->resizeColumnToContents(2);

         ui->mfypoz->show();


}

mfypozitronik::mfypozitronik(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::mfypozitronik)
{
    ui->setupUi(this);


 create();

}

mfypozitronik::~mfypozitronik()
{
    delete ui;
}



 void mfypozitronik::on_mfypoz_clicked(const QModelIndex &index)
{
    QPixmap temp_non ;
            temp_non = ui->mfypoz->model()->data(ui->mfypoz->model()->index(index.row(),2)).toString();
    ui->lpic_2->setPixmap(temp_non);
 ui->lpic_2->setScaledContents(true);

 QString temp_nom = ui->mfypoz->model()->data(ui->mfypoz->model()->index(index.row(),0)).toString();
 ui->problema->setText(temp_nom);
 QString temp_nom2 = ui->mfypoz->model()->data(ui->mfypoz->model()->index(index.row(),1)).toString();
 ui->reshenie->setText(temp_nom2);
 QString temp_nom3 = ui->mfypoz->model()->data(ui->mfypoz->model()->index(index.row(),2)).toString();
 ui->instruction->setText(temp_nom3);

// ui->problema->text()=oldproblem;
 oldproblem=ui->problema->text();
 oldopican=ui->reshenie->text();
 oldinstruction=ui->instruction->text();
}




void mfypozitronik::on_main_triggered()
{
    hide();
    mainmenu* window = new mainmenu();
    window->show();
}

void mfypozitronik::on_tormoz_clicked()
{
    tormozpol* window = new tormozpol();
    window->show();
}

void mfypozitronik::on_rolik_clicked()
{
    rolikpodachi* window = new rolikpodachi();
    window->show();
}

void mfypozitronik::on_telval_clicked()
{
    tefval* window = new tefval();
    window->show();
}


void mfypozitronik::on_add_clicked()
{


     QSqlQuery query = QSqlQuery ();
        query.prepare("INSERT INTO public.mfypozitronik(проблема, ответ, пример_изображения_или_замены)"
                   "VALUES (:problem, :opican, :image)");
        query.bindValue(":problem",ui->problema->text());
        query.bindValue(":opican",ui->reshenie->text());
        query.bindValue(":image",str);
        query.bindValue(":image",ui->instruction->text());
        if( !query.exec() )
          {  qDebug() << "Error" << query.lastQuery();}


        create();


}

void mfypozitronik::on_image_clicked()
{
 str = QFileDialog::getOpenFileName(0, "Открыть изображение", "", "*.jpg *.bmp *png");
 ui->instruction->setText(QString(str));

}

void mfypozitronik::on_insert_clicked()
{

    QSqlQuery query = QSqlQuery ();
     query.exec("UPDATE public.mfypozitronik "
                "SET  проблема='"+ui->problema->text()+"', ответ='"+ui->reshenie->text()+"', пример_изображения_или_замены='"+ui->instruction->text()+"' "
                "WHERE проблема ='"+oldproblem+"' and ответ='"+oldopican+"'and "
                "пример_изображения_или_замены='"+oldinstruction+"'");


     if( !query.exec() )
        { qDebug() << "Error" << query.lastQuery();}

      create();

}

void mfypozitronik::on_delete_2_clicked()
{
    QSqlQuery query = QSqlQuery ();
     query.exec("DELETE FROM public.mfypozitronik "
                "WHERE проблема = '"+ui->problema->text()+"' "
                "and ответ = '"+ui->reshenie->text()+"' and пример_изображения_или_замены = '"+ui->instruction->text()+"'");

    if( !query.exec() )
    {qDebug() << "Error" << query.lastQuery();}

    create();
}

void mfypozitronik::on_pushButton_clicked()
{
      QSqlQuery query = QSqlQuery ();
      query.exec("drop table mfypozitronik");


      create();
}
